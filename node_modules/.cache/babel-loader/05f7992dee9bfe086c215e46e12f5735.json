{"ast":null,"code":"import API from '../../services/api';\nimport * as actionTypes from './actionTypes';\nimport { getProfileDetails } from '../../services/myAccountService';\nimport { isEmpty } from '../../validation';\nconst Api_url = process.env.REACT_APP_URL_PATH;\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    return API.post(`${Api_url}/rest-auth/login/`, {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('username', username);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(token));\n      dispatch(checkAuthTimeout(3600));\n      getProfileDetails().then(response => {\n        if (!isEmpty(response.data.pk)) {\n          localStorage.setItem('UserId', response.data.pk);\n        }\n      });\n      return {\n        status: true\n      };\n    }).catch(err => {\n      dispatch(authFail(err));\n      return err.response.data;\n    });\n  };\n};\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    return API.post(`${Api_url}/rest-auth/registration/`, {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(token));\n      dispatch(checkAuthTimeout(3600));\n      return {\n        status: true\n      };\n    }).catch(err => {\n      dispatch(authFail(err));\n      return err.response.data;\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/arifretiwala/python-project/front-end/final_1/cshah/Cash-My-Device/src/store/actions/auth.js"],"names":["API","actionTypes","getProfileDetails","isEmpty","Api_url","process","env","REACT_APP_URL_PATH","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","username","password","post","then","res","data","key","expirationDate","Date","getTime","setItem","response","pk","status","catch","err","authSignup","email","password1","password2","authCheckState","getItem","undefined"],"mappings":"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","sourcesContent":["import API from '../../services/api';\nimport * as actionTypes from './actionTypes';\nimport { getProfileDetails } from '../../services/myAccountService';\nimport { isEmpty } from '../../validation';\n\nconst Api_url = process.env.REACT_APP_URL_PATH;\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = token => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token\n    }\n}\n\nexport const authFail = error => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n}\n\nexport const checkAuthTimeout = expirationTime => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000)\n    }\n}\n\nexport const authLogin = (username, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        return API.post(`${Api_url}/rest-auth/login/`, {\n            username: username,\n            password: password\n        })\n            .then(res => {\n                const token = res.data.key;\n                const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n                localStorage.setItem('token', token);\n                localStorage.setItem('username', username);\n                localStorage.setItem('expirationDate', expirationDate);\n                dispatch(authSuccess(token));\n                dispatch(checkAuthTimeout(3600));\n                getProfileDetails().then(response => {\n                    if (!isEmpty(response.data.pk)) {\n                        localStorage.setItem('UserId', response.data.pk)\n                    }\n                })\n                return {\n                    status: true\n                }\n            })\n            .catch(err => {\n                dispatch(authFail(err))\n                return err.response.data\n            })\n    }\n}\n\nexport const authSignup = (username, email, password1, password2) => {\n    return dispatch => {\n        dispatch(authStart());\n        return API.post(`${Api_url}/rest-auth/registration/`, {\n            username: username,\n            email: email,\n            password1: password1,\n            password2: password2\n        })\n            .then(res => {\n                const token = res.data.key;\n                const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n                localStorage.setItem('token', token);\n                localStorage.setItem('expirationDate', expirationDate);\n                dispatch(authSuccess(token));\n                dispatch(checkAuthTimeout(3600));\n                return {\n                    status: true\n                }\n            })\n            .catch(err => {\n                dispatch(authFail(err))\n                return err.response.data\n            })\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (token === undefined) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()) {\n                dispatch(logout());\n            } else {\n                dispatch(authSuccess(token));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}